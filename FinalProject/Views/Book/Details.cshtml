@model FinalProject.Models.Book

@{
    ViewData["Title"] = Model.Title + " Details"; // Use the book title for the page title and add "Details"
    // Assuming ViewBag.IsBookmarked is set in the controller action
    var isBookmarked = ViewBag.IsBookmarked != null && (bool)ViewBag.IsBookmarked;
    // Assuming ViewBag.CanDelete is set in the controller action (e.g., based on user role)
    var canDelete = ViewBag.CanDelete != null && (bool)ViewBag.CanDelete;

    // Define a placeholder image URL for books without covers
    var placeholderImageUrl = "https://placehold.co/300x450/e9ecef/495057?text=No+Cover+Available"; // Larger placeholder

    // Assuming ViewBag.HasPurchased is set in the controller action
    // This boolean determines if the user has purchased the book.
    var hasPurchased = ViewBag.HasPurchased != null && (bool)ViewBag.HasPurchased;

    // Check if the user has already submitted a review for this book
    var hasUserReviewed = ViewBag.HasUserReviewed != null && (bool)ViewBag.HasUserReviewed;
}

@* Assuming Bootstrap CSS and Font Awesome are already included in your layout file (_Layout.cshtml) *@
@* If not, you would need to add the CDN links: *@
@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
@* <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"> *@
@* And the Bootstrap JS bundle (for alerts, etc.): *@
@* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@

<head>
    @* Add Font Awesome for icons (assuming it's not already in your layout) *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Page Background Gradient */
        body {
             background: linear-gradient(to bottom right, #F5F5FC, #E0E0F8); /* Subtle gradient from light purple/grey to a slightly darker shade */
             min-height: 100vh; /* Ensure gradient covers the full viewport height */
             margin: 0; /* Remove default body margin */
             padding: 0; /* Remove default body padding */
             font-family: 'Inter', sans-serif; /* Use a clean sans-serif font */
         }

        /* Load Inter font if not already loaded */
         @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');


         /* Custom styles based on reference UI colors */
         .text-primary-custom {
             color: #FF7F50 !important; /* Vibrant Orange from reference */
         }

          .btn-primary-custom {
             background-color: #FF7F50 !important; /* Vibrant Orange from reference */
             border-color: #FF7F50 !important; /* Vibrant Orange from reference */
             color: white !important; /* White text for contrast */
             border-radius: .3rem; /* Slightly more rounded buttons */
             transition: background-color 0.3s ease-in-out, border-color 0.3s ease-in-out; /* Add transition for hover */
         }

          .btn-primary-custom:hover {
              background-color: #FF6347 !important; /* Slightly darker orange on hover */
              border-color: #FF6347 !important;
          }

           .btn-outline-primary-custom {
             color: #FF7F50 !important; /* Vibrant Orange text from reference */
             border-color: #FF7F50 !important; /* Vibrant Orange border from reference */
             background-color: transparent !important;
             border-radius: .3rem; /* Slightly more rounded buttons */
              transition: color 0.3s ease-in-out, background-color 0.3s ease-in-out, border-color 0.3s ease-in-out; /* Add transition for hover */
         }

         .btn-outline-primary-custom:hover {
             color: white !important;
             background-color: #FF7F50 !important; /* Vibrant Orange background on hover */
             border-color: #FF7F50 !important;
         }

          .text-secondary-custom {
             color: #6c757d !important; /* Bootstrap secondary - fits the muted tone */
         }

         .border-primary-custom {
             border-color: #FF7F50 !important; /* Vibrant Orange border */
         }

         .text-success-custom {
             color: #28a745 !important; /* Bootstrap success - fits the green tone */
         }

         .text-danger-custom {
             color: #dc3545 !important; /* Bootstrap danger - fits the red tone */
         }


         /* Enhanced card styling */
         .card {
             border-radius: .75rem; /* More rounded corners for the card */
             box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important; /* Default shadow */
             background-color: #ffffff; /* Ensure card background is white */
             border: none; /* Remove default border */
         }

        .card-body {
            padding: 2.5rem; /* Increased padding for more space inside the card */
        }

         .card-img-top {
             border-radius: .5rem; /* Slightly rounded corners for image */
             box-shadow: 0 .25rem .75rem rgba(0,0,0,.1); /* Subtle shadow for image */
         }

         .card-footer {
             border-bottom-left-radius: .75rem; /* Match bottom footer corners to card */
             border-bottom-right-radius: .75rem; /* Match bottom footer corners to card */
             background-color: #f8f9fa; /* Slightly lighter footer background */
         }

         /* Professional UI adjustments */
         .form-control, .form-select {
             border-radius: .3rem; /* Slightly rounded form elements */
         }

         .btn {
             border-radius: .3rem; /* Slightly rounded buttons */
         }

         .reviews-section h2,
         .add-review-section h3 {
             color: #FF7F50; /* Orange color for section headings */
             margin-bottom: 1.5rem; /* Increased margin below section headings */
         }

         .review-item {
             border-bottom: 1px solid #e9ecef; /* Lighter border for review items */
             padding-bottom: 1.5rem; /* Increased padding below review item */
             margin-bottom: 1.5rem; /* Increased margin below review item */
         }

         .review-item:last-child {
             border-bottom: none; /* No border on the last review item */
             margin-bottom: 0;
             padding-bottom: 0;
         }

         .rating i {
             color: #ffc107; /* Bootstrap warning color for stars */
         }

         .add-review-section {
             background-color: #ffffff; /* White background for the review form section */
             border: 1px solid #dee2e6; /* Light border */
             border-radius: .5rem; /* Rounded corners */
             padding: 2rem; /* Increased padding */
             box-shadow: 0 .125rem .25rem rgba(0,0,0,.075); /* Subtle shadow */
             margin-top: 3rem; /* Increased top margin for the review section */
         }

         /* Custom button group spacing and alignment */
         .action-buttons-group {
             display: flex;
             flex-wrap: wrap;
             gap: 1.5rem; /* Increased gap between buttons */
             margin-top: 3rem; /* Increased top margin */
             justify-content: center; /* Center buttons horizontally */
         }

         .action-buttons-group .btn,
         .action-buttons-group form {
             flex-grow: 0; /* Prevent buttons from growing */
             flex-shrink: 0; /* Prevent buttons from shrinking */
         }

         /* Specific styles for book details layout */
         .book-details-header {
             display: flex;
             align-items: center;
             margin-bottom: 1.5rem; /* Increased space below the header block */
             padding-bottom: 1rem; /* Add padding below the header block */
             border-bottom: 1px solid #e9ecef; /* Add a subtle separator line */
         }

         .book-details-header h4 {
             margin-bottom: 0.25rem; /* Less margin below title */
         }

         .book-details-header .rating {
             margin-left: auto; /* Push rating and buttons to the right */
             display: flex;
             align-items: center;
             gap: 0.75rem; /* Increased space between rating stars and buttons */
         }

         .book-details-header .rating .btn-group {
             margin-left: 1rem; /* Increased space between rating and buttons */
         }

         .book-description {
             margin-top: 1.5rem; /* Space above description */
             margin-bottom: 2rem; /* Increased space below description */
             line-height: 1.6; /* Improve readability */
             color: #555; /* Slightly darker grey for body text */
         }

         .book-details-list {
             margin-top: 2rem; /* Increased space above the details list */
         }

         .book-details-list dt {
             font-weight: 500; /* Medium font weight for labels */
             color: #495057; /* Slightly darker muted text */
         }

         .book-details-list dd {
             color: #343a40; /* Darker text for values */
         }

         /* Spacing for form elements in review section */
         .add-review-section .form-label {
             margin-bottom: 0.5rem; /* Space below form labels */
             font-weight: 500; /* Medium font weight for labels */
         }

         .add-review-section .form-control,
         .add-review-section .form-select {
             margin-bottom: 1rem; /* Space below form inputs/select */
         }


    </style>
</head>


<div class="container mt-4 py-4"> @* Use Bootstrap container, margin top, and vertical padding *@

    @* Applied custom primary color to the heading *@
    <h1 class="mb-4 text-center text-primary-custom">@Html.DisplayFor(model => model.Title)</h1>

    @* Display TempData message if it exists *@
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show shadow-sm mb-4" role="alert"> @* Bootstrap alert styling with shadow and margin bottom *@
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @* Display validation summary if there are any model errors *@
    @if (ViewData.ModelState.ErrorCount > 0)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm mb-4" role="alert">
            <div asp-validation-summary="All" class="text-danger"></div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @* Applied enhanced card styling *@
    <div class="card shadow-lg border-0 rounded-3"> @* Bootstrap card container for details with larger shadow, no border, rounded corners *@
        @* Increased padding *@
        <div class="card-body p-4">

            @* Bootstrap row for details layout with larger gap *@
            <div class="row g-4">
                @* Book Cover Image Section *@
                @* Responsive column, centering *@
                <div class="col-md-4 d-flex justify-content-center"> @* Removed align-items-start to center vertically if needed *; kept justify-content-center *@
                    @* Bootstrap image classes, rounded, shadow, light border, increased max-height, object-fit *@
                    @* Applied enhanced image styling *@
                    <img src="@(string.IsNullOrEmpty(Model.CoverImageUrl) ? placeholderImageUrl : Model.CoverImageUrl)"
                         alt="Book Cover"
                         class="img-fluid rounded shadow-sm border border-light" style="max-height: 400px; object-fit: cover;" />
                </div>

                @* Book Details Content Section *@
                <div class="col-md-8"> @* Responsive column *@

                    @* Header block with Title, Author, Rating, Bookmark, and Add to Cart *@
                    <div class="book-details-header">
                        <div>
                            @* Applied custom primary color for title *@
                            <h4 class="card-title mb-1 text-primary-custom">@Html.DisplayFor(model => model.Title)</h4>
                            @* Author name bolded, muted text *@
                            <p class="card-text text-muted small mb-0">
                                by <span class="fw-semibold">@(Model.Author != null ? $"{Model.Author.FirstName} {Model.Author.LastName}" : "Unknown Author")</span>
                            </p>
                        </div>
                        <div class="rating">
                             @if (Model.Rating.HasValue)
                            {
                                @* Display stars based on rating *@
                                @for (int i = 0; i < Math.Floor(Model.Rating.Value); i++)
                                {
                                    <i class="fas fa-star text-warning"></i> @* Full star *@
                                }
                                @if (Model.Rating % 1 != 0) // Check for half star
                                {
                                    <i class="fas fa-star-half-alt text-warning"></i> @* Half star *@
                                }
                                @for (int i = 0; i < 5 - Math.Ceiling(Model.Rating.Value); i++)
                                {
                                    <i class="far fa-star text-warning"></i> @* Empty star *@
                                }
                                <span class="ms-2 text-muted">(@Html.DisplayFor(model => model.Rating) / 5)</span> @* Display numerical rating *@
                            }
                            else
                            {
                                <span>No rating available</span>
                            }

                            @* Bookmark and Add to Cart buttons placed near rating *@
                             <div class="btn-group ms-3" role="group" aria-label="Book Actions">
                                @if (User?.Identity?.IsAuthenticated == true)
                                {
                                    @* Bookmark Button *@
                                    @if (isBookmarked)
                                    {
                                        <span class="btn btn-sm btn-success disabled shadow-sm" title="You have bookmarked this book.">
                                            <i class="fas fa-bookmark"></i>
                                        </span> @* Bootstrap success button (disabled), small size, shadow *@
                                    }
                                    else
                                    {
                                        @* Create a form for the Bookmark action *@
                                        @* Applied custom outline primary button style *@
                                        <form asp-controller="Book" asp-action="Bookmark" method="post" style="display:inline;">
                                            <input type="hidden" name="bookId" value="@Model?.BookId" />
                                            @Html.AntiForgeryToken() @* Include the anti-forgery token *@
                                            <button type="submit" class="btn btn-sm btn-outline-primary-custom shadow-sm" title="Bookmark this book">
                                                 <i class="far fa-bookmark"></i>
                                            </button>
                                        </form>
                                    }

                                    @* Add to Cart Button *@
                                    @* Applied custom primary button style *@
                                    <form asp-controller="Book" asp-action="AddToCart" method="post" style="display:inline;">
                                        <input type="hidden" name="bookId" value="@Model?.BookId" />
                                        @Html.AntiForgeryToken() @* Include the anti-forgery token *@
                                        <button type="submit" class="btn btn-sm btn-primary-custom shadow-sm" title="Add this book to your shopping cart">
                                            <i class="fas fa-shopping-cart"></i> Add to Cart
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    @* Show disabled buttons for unauthenticated users *@
                                    <span class="btn btn-sm btn-outline-secondary disabled shadow-sm" title="Login to bookmark books">
                                        <i class="far fa-bookmark"></i>
                                    </span> @* Bootstrap outline secondary button (disabled), small size, shadow *@
                                     <span class="btn btn-sm btn-outline-secondary disabled shadow-sm" title="Login to add to cart">
                                        <i class="fas fa-shopping-cart"></i> Add to Cart
                                    </span> @* Bootstrap outline secondary button (disabled), small size, shadow *@
                                }
                             </div>

                        </div>
                    </div>

                    @* Book Description *@
                    <p class="book-description">
                        @Html.DisplayFor(model => model.Description)
                    </p>

                    @* Remaining Book Details List *@
                    <h5 class="mt-4 mb-3 text-secondary-custom">Additional Details</h5>
                    <hr class="mb-4"/>
                     <dl class="row g-3 book-details-list"> @* Added custom class for list styling *@
                        <dt class="col-sm-3"> @* Removed muted text class here for slightly darker labels *@
                            <i class="fas fa-barcode me-2"></i> @Html.DisplayNameFor(model => model.Isbn) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.Isbn)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-calendar-alt me-2"></i> @Html.DisplayNameFor(model => model.PublicationDate) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.PublicationDate)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-dollar-sign me-2"></i> @Html.DisplayNameFor(model => model.ListPrice) @* Icon added *@
                        </dt>
                        @* Applied custom success color and larger font size *@
                        <dd class="col-sm-9 fw-bold text-success-custom fs-5">
                            @Html.DisplayFor(model => model.ListPrice)
                        </dd>

                        @* Display Sale Information if applicable *@
                        @if (Model.OnSale && Model.SaleDiscount.HasValue)
                        {
                            <dt class="col-sm-3"> @* Removed muted text class here *@
                                <i class="fas fa-tags me-2"></i> Sale Price @* Icon added *@
                            </dt>
                            @* Applied custom danger color and larger font size *@
                            <dd class="col-sm-9 fw-bold text-danger-custom fs-5">
                                @((Model.ListPrice * (1 - Model.SaleDiscount.Value)).ToString("C")) @* Calculate and display sale price *@
                            </dd>
                             <dt class="col-sm-3"> @* Removed muted text class here *@
                                <i class="fas fa-percent me-2"></i> Sale Discount @* Icon added *@
                            </dt>
                            <dd class="col-sm-9">
                                @(Model.SaleDiscount.Value.ToString("P0")) @* Display discount as percentage *@
                            </dd>
                             @if(Model.SaleStartDate.HasValue && Model.SaleEndDate.HasValue)
                             {
                                 <dt class="col-sm-3"> @* Removed muted text class here *@
                                    <i class="fas fa-clock me-2"></i> Sale Dates @* Icon added *@
                                </dt>
                                <dd class="col-sm-9">
                                    @Model.SaleStartDate.Value.ToString("yyyy-MM-dd") to @Model.SaleEndDate.Value.ToString("yyyy-MM-dd")
                                </dd>
                             }
                        }


                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-user me-2"></i> @Html.DisplayNameFor(model => model.Author) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @(Model.Author != null ? $"{Model.Author.FirstName} {Model.Author.LastName}" : "Unknown Author")
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-building me-2"></i> @Html.DisplayNameFor(model => model.Publisher) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @(Model.Publisher != null ? Model.Publisher.Name : "Unknown Publisher")
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-book me-2"></i> @Html.DisplayNameFor(model => model.Genre) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @(Model.Genre != null ? Model.Genre.Name : "Unknown Genre")
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-language me-2"></i> @Html.DisplayNameFor(model => model.Language) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.Language)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-file-alt me-2"></i> @Html.DisplayNameFor(model => model.Format) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.Format)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-warehouse me-2"></i> @Html.DisplayNameFor(model => model.AvailabilityStock) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.AvailabilityStock)
                        </dd>

                         <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-book-reader me-2"></i> @Html.DisplayNameFor(model => model.AvailabilityLibrary) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.AvailabilityLibrary)
                        </dd>

                        @* Rating Count Display *@
                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-users me-2"></i> @Html.DisplayNameFor(model => model.RatingCount) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.RatingCount)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-calendar-plus me-2"></i> @Html.DisplayNameFor(model => model.DateAdded) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.DateAdded)
                        </dd>

                        <dt class="col-sm-3"> @* Removed muted text class here *@
                            <i class="fas fa-edit me-2"></i> @Html.DisplayNameFor(model => model.DateUpdated) @* Icon added *@
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => model.DateUpdated)
                        </dd>
                    </dl>


                </div>
            </div>
        </div>
    </div>

    @* Action Buttons Below the Card *@
    @* Applied custom button styles and increased gap, centered the group *@
    <div class="action-buttons-group"> @* Custom class for button group styling *@

        @* Edit Button *@
        @* <a asp-action="Edit" asp-route-id="@Model?.BookId" class="btn btn-warning btn-lg shadow-sm"> *@
        @* <i class="fas fa-edit me-2"></i> Edit *@
        @* </a> $1$ Bootstrap warning button, large size, shadow #1# *@

        @* Back to List Button *@
        <a asp-action="Index" class="btn btn-secondary btn-lg shadow-sm">
            <i class="fas fa-arrow-left me-2"></i> Back to List
        </a> @* Bootstrap secondary button, large size, shadow *@

        @* Conditional Delete Button (e.g., for Admin users) *@
        @if (User?.Identity?.IsAuthenticated == true && canDelete)
        {
             <a asp-action="Delete" asp-route-id="@Model?.BookId" class="btn btn-danger btn-lg shadow-sm">
                 <i class="fas fa-trash-alt me-2"></i> Delete
             </a> @* Bootstrap danger button, large size, shadow *@
        }
    </div>

    @* Applied custom styling to the reviews section *@
    <div class="reviews-section mt-5">
        <h2 class="mb-3 text-center text-secondary">Customer Reviews</h2>
        <hr class="mb-4"/>

        @if (Model.Reviews != null && Model.Reviews.Any())
        {
            <div class="review-list">
                @foreach (var review in Model.Reviews.OrderByDescending(r => r.ReviewDate))
                {
                    @* Applied custom styling to individual review items *@
                    <div class="review-item border-bottom pb-3 mb-3"> @* Adjusted padding and margin bottom *@
                        <h5> @(review.Member?.FirstName ?? "Anonymous User")</h5> @* Display member's username if available *@
                        <div class="rating mb-2"> @* Added margin bottom to rating *@
                            @for (int i = 0; i < review.Rating; i++)
                            {
                                <i class="fas fa-star text-warning"></i> @* Full star *@
                            }
                            @for (int i = review.Rating; i < 5; i++)
                            {
                                <i class="far fa-star text-warning"></i> @* Empty star *@
                            }
                            <span class="ms-2 text-muted">(@review.Rating/5)</span> @* Display numerical rating *@
                        </div>
                        <p class="mt-2 mb-2">@review.Comment</p> @* Adjusted margins for comment *@
                        <small class="text-muted">Reviewed on: @review.ReviewDate.ToShortDateString()</small>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-center text-muted">No reviews yet. Be the first to review this book!</p>
        }
    </div>
    @* --- End Section to Display Existing Reviews --- *@


    @* --- Conditional "Add Review" Section --- *@
    @* Check if the user is authenticated, has purchased the book, and hasn't already reviewed it *@
    @if (User?.Identity?.IsAuthenticated == true && hasPurchased && !hasUserReviewed)
    {
        @* Applied custom styling for the section *@
        <div class="add-review-section mt-5 p-4 border rounded-3 bg-light shadow-sm"> @* Added styling for the section *@
            <h3 class="mb-3 text-secondary">Leave Your Review</h3>
            <p class="text-muted">Share your thoughts on this book after purchasing it.</p>
            <hr class="mb-4"/>

            <form asp-controller="Reviews" asp-action="CreateReview" method="post">
                <input type="hidden" name="BookId" value="@Model.BookId" />

                <div class="mb-3"> @* Bootstrap margin bottom *@
                    <label for="Rating" class="form-label">Rating</label> @* Bootstrap form label *@
                    <select name="Rating" id="Rating" class="form-select" required>
                        <option value="">Select Rating</option> @* Changed default option value to empty *@
                        <option value="1">1 - Poor</option>
                        <option value="2">2 - Fair</option>
                        <option value="3">3 - Good</option>
                        <option value="4">4 - Very Good</option>
                        <option value="5">5 - Excellent</option>
                    </select>
                    <span class="text-danger field-validation-valid" data-valmsg-for="Rating" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3"> @* Bootstrap margin bottom *@
                    <label for="Comment" class="form-label">Your Comment</label> @* Bootstrap form label *@
                    <textarea name="Comment" id="Comment" class="form-control" rows="5" required></textarea>
                    <span class="text-danger field-validation-valid" data-valmsg-for="Comment" data-valmsg-replace="true"></span>
                </div>

                @* Applied custom primary button style *@
                <button type="submit" class="btn btn-primary-custom btn-lg mt-3">Submit Review</button> @* Bootstrap button styling *@

                @* Include the anti-forgery token for security on POST forms *@
                @Html.AntiForgeryToken()
            </form>
        </div>
    }
    else if (User?.Identity?.IsAuthenticated == true && hasPurchased && hasUserReviewed)
    {
        @* Applied custom styling for the section *@
        <div class="add-review-section mt-5 p-4 border rounded-3 bg-light shadow-sm text-center">
            <p class="lead text-muted">You have already reviewed this book. Thank you for your feedback!</p>
        </div>
    }
    else if (User?.Identity?.IsAuthenticated == true)
    {
        @* Applied custom styling for the section *@
        <div class="add-review-section mt-5 p-4 border rounded-3 bg-light shadow-sm text-center">
            <p class="lead text-muted">You must purchase this book to leave a review.</p>
        </div>
    }
    else
    {
        @* Applied custom styling for the section *@
        <div class="add-review-section mt-5 p-4 border rounded-3 bg-light shadow-sm text-center">
            <p class="lead text-muted"><a asp-controller="Member" asp-action="Login">Login</a> or register to purchase and review books.</p>
        </div>
    }
    @* --- End Conditional "Add Review" Section --- *@

</div> @* End container *@

@section Scripts {
    <script>
        // Enable dismissible alerts
        document.addEventListener('DOMContentLoaded', function() {
            var alerts = document.querySelectorAll('.alert-dismissible .btn-close');
            alerts.forEach(function(alert) {
                alert.addEventListener('click', function() {
                    this.parentElement.classList.remove('show');
                    setTimeout(function() {
                        this.parentElement.remove();
                    }.bind(this), 150);
                });
            });
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
