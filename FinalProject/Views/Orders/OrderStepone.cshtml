@model List<FinalProject.ViewModels.ShoppingCartItemViewModel>

@{
    ViewData["Title"] = "Order Review";
    // Retrieve the totals and discount information from ViewData, using null-conditional operator and default values for safety
    var totalCartItems = ViewData["TotalCartItems"] as int? ?? 0;
    var initialTotalCartPrice = ViewData["InitialTotalCartPrice"] as string ?? "$0.00";
    var bulkDiscountPercentage = ViewData["BulkDiscountPercentage"] as string ?? "0%";
    var loyaltyDiscountPercentage = ViewData["LoyaltyDiscountPercentage"] as string ?? "0%";
    var totalDiscountPercentage = ViewData["TotalDiscountPercentage"] as string ?? "0%";
    var totalDiscountAmount = ViewData["TotalDiscountAmount"] as string ?? "$0.00";
    var bulkDiscountAmount = ViewData["BulkDiscountAmount"] as string ?? "$0.00";
    var loyaltyDiscountAmount = ViewData["LoyaltyDiscountAmount"] as string ?? "$0.00";
    var finalTotalCartPrice = ViewData["FinalTotalCartPrice"] as string ?? "$0.00";

    // Note: The previous ViewData["TotalCartPrice"] is now the initial total before discounts.
    // We are using "InitialTotalCartPrice" and "FinalTotalCartPrice" to distinguish.
}

<div class="container mt-4">
    <div class="card shadow-sm"> @* Added Card structure with shadow *@
        <div class="card-header bg-success text-white"> @* Styled card header, perhaps a different color for the order process *@
            <h2 class="card-title mb-0">Order Review</h2> @* Styled heading inside card *@
        </div>
        <div class="card-body">

             @* Placeholder for dynamic messages (error or success) *@
             <div id="notificationMessage" class="alert text-center" style="display: none;" role="alert">
                 @* Message will be populated by JavaScript *@
             </div>

             @* Display initial error message if redirected from an empty cart scenario *@
             @if (TempData["ErrorMessage"] != null)
             {
                 <div class="alert alert-danger text-center" role="alert"> @* Centered alert text *@
                     @TempData["ErrorMessage"]
                 </div>
             }

            @if (Model == null || !Model.Any())
            {
                <div class="alert alert-warning text-center" role="alert"> @* Centered alert text *@
                    No items found in your cart for review.
                    @* Link back to the shopping cart page *@
                    <p class="mt-2 mb-0"><a href="@Url.Action("Profile", "ShoppingCartItems")" class="alert-link">Return to Shopping Cart</a></p>
                </div>
            }
            else
            {
                <p>Please review the items in your order before proceeding.</p>

                <div class="table-responsive"> @* Added responsive table wrapper *@
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="thead-light"> @* Maybe a lighter table header for review *@
                            <tr>
                                <th>
                                    Book Title @* Can hardcode headers in the view if preferred *@
                                </th>
                                <th>
                                    Author
                                </th>
                                <th class="text-center" style="width: 100px;"> @* Adjusted column width and centered *@
                                    Quantity
                                </th>
                                <th class="text-right"> @* Aligned right *@
                                    Price
                                </th>
                                <th class="text-right"> @* Aligned right *@
                                    Subtotal
                                </th>
                                @* Date Added might not be relevant for the review step, you can remove this column *@
                                @* <th>Date Added</th> *@
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BookTitle)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BookAuthorName)
                                    </td>
                                    <td class="text-center"> @* Centered text *@
                                        @Html.DisplayFor(modelItem => item.Quantity)
                                    </td>
                                    <td class="text-right"> @* Aligned right *@
                                        @Html.DisplayFor(modelItem => item.BookListPriceDisplay)
                                    </td>
                                    <td class="text-right"> @* Aligned right *@
                                        @Html.DisplayFor(modelItem => item.TotalPriceDisplay)
                                    </td>
                                     @* Only include if you kept the Date Added column *@
                                     @* <td> @Html.DisplayFor(modelItem => item.DateAddedDisplay) </td> *@
                                </tr>
                            }
                        </tbody>
                    </table>
                </div> @* End of table-responsive *@

                <div class="row mt-4"> @* Added row for summary and navigation buttons *@
                    <div class="col-md-6 offset-md-6"> @* Offset column to push summary to the right *@
                        <div class="card bg-light"> @* Added a light card for the summary *@
                            <div class="card-body">
                                <h5 class="card-title">Order Summary</h5>
                                <ul class="list-group list-group-flush"> @* Used list group for summary items *@
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Total Items
                                        @* Display Total Items from ViewData *@
                                        <span class="badge badge-primary badge-pill text-black">@totalCartItems</span>
                                    </li>
                                     <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Subtotal (Before Discounts)
                                        @* Display Initial Total from ViewData *@
                                        <span>@initialTotalCartPrice</span>
                                    </li>
                                     @* Display Bulk Discount if applied and greater than zero *@
                                    @if (Convert.ToDecimal(bulkDiscountAmount.Replace("$", "").Replace(",", "")) > 0)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center text-success">
                                            Bulk Discount (@bulkDiscountPercentage)
                                            @* Display the calculated bulk discount amount *@
                                            <span>- @bulkDiscountAmount</span>
                                        </li>
                                    }
                                     @* Display Loyalty Discount if applied and greater than zero *@
                                    @if (Convert.ToDecimal(loyaltyDiscountAmount.Replace("$", "").Replace(",", "")) > 0)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center text-success">
                                            Loyalty Discount (@loyaltyDiscountPercentage)
                                            @* Display the calculated loyalty discount amount *@
                                            <span>- @loyaltyDiscountAmount</span>
                                        </li>
                                    }
                                     <li class="list-group-item d-flex justify-content-between align-items-center font-weight-bold text-primary">
                                        Total Discount Applied (@totalDiscountPercentage)
                                        @* Display Total Discount Amount from ViewData *@
                                        <span>- @totalDiscountAmount</span> @* Display as negative to show reduction *@
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center font-weight-bold">
                                        Grand Total (After Discounts)
                                        @* Display Final Grand Total from ViewData *@
                                        <span class="text-success">@finalTotalCartPrice</span>
                                    </li>
                                </ul>
                                <div class="mt-3 d-flex justify-content-between"> @* Use flexbox to space out buttons *@
                                    @* Link back to the shopping cart to make changes *@
                                    <a href="@Url.Action("Profile", "ShoppingCartItems")" class="btn btn-secondary">Back to Cart</a>

                                    @* Form for AJAX submission *@
                                    <form id="placeOrderForm" asp-action="PlaceOrder" asp-controller="Orders" method="post">
                                        @Html.AntiForgeryToken() @* Include the anti-forgery token *@
                                        <button type="submit" id="placeOrderButton" class="btn btn-success btn-lg">Place order</button>
                                    </form>
                                    </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div> @* End of card-body *@
    </div> @* End of card *@
</div> @* End of container *@

@section Scripts {
    <script>
        document.getElementById('placeOrderForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent the default form submission

            const form = event.target;
            const button = document.getElementById('placeOrderButton');
            const notificationDiv = document.getElementById('notificationMessage');

            // Hide any previous messages
            notificationDiv.style.display = 'none';
            notificationDiv.className = 'alert text-center'; // Reset classes

            // Disable the button and show a loading indicator (optional)
            button.disabled = true;
            button.textContent = 'Processing...'; // Or add a spinner

            // Get the anti-forgery token
            const antiForgeryToken = form.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(form.action, {
                method: form.method,
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken // Include the token in headers
                },
                // No body needed for this POST request as data is handled server-side
            })
            .then(response => {
                // Check if the response is OK (status 200-299)
                if (!response.ok) {
                    // If not OK, try to read the error message from the response body
                    return response.json().then(data => {
                         throw new Error(data.message || `HTTP error! status: ${response.status}`);
                    }).catch(() => {
                         // If JSON parsing fails, throw a generic error with status
                         throw new Error(`HTTP error! status: ${response.status}`);
                    });
                }
                // If OK, parse the JSON response
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Display success message
                    notificationDiv.classList.add('alert-success');
                    notificationDiv.textContent = data.message;
                    notificationDiv.style.display = 'block';

                    // Optional: Hide the cart details and buttons after successful order
                    // You might want to show a "Thank You" message or a link to order history
                    const cartDetails = form.closest('.card-body').querySelector('.table-responsive'); // Adjust selector as needed
                    const summaryCard = form.closest('.row').querySelector('.card.bg-light'); // Adjust selector as needed
                    if (cartDetails) cartDetails.style.display = 'none';
                    if (summaryCard) summaryCard.style.display = 'none';
                    // Keep the notification visible

                } else {
                    // Display error message
                    notificationDiv.classList.add('alert-danger');
                    notificationDiv.textContent = data.message || 'An unknown error occurred.';
                    notificationDiv.style.display = 'block';

                    // Re-enable the button on error
                    button.disabled = false;
                    button.textContent = 'Place order';
                }
            })
            .catch(error => {
                // Handle network errors or errors thrown during response processing
                console.error('Error:', error);
                notificationDiv.classList.add('alert-danger');
                notificationDiv.textContent = 'An error occurred: ' + error.message;
                notificationDiv.style.display = 'block';

                // Re-enable the button on error
                button.disabled = false;
                button.textContent = 'Place order';
            });
        });
    </script>
}
