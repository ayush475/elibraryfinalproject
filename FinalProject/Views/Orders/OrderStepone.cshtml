@model List<FinalProject.ViewModels.ShoppingCartItemViewModel>

@{
    ViewData["Title"] = "Order Review";
    // Retrieve the totals and discount information from ViewData
    // Using null-conditional operator and default values for safety.
    var totalCartItems = ViewData["TotalCartItems"] as int? ?? 0;
    var initialTotalCartPrice = ViewData["InitialTotalCartPrice"] as string ?? "$0.00";
    var bulkDiscountPercentage = ViewData["BulkDiscountPercentage"] as string ?? "0%";
    var loyaltyDiscountPercentage = ViewData["LoyaltyDiscountPercentage"] as string ?? "0%";
    var totalDiscountPercentage = ViewData["TotalDiscountPercentage"] as string ?? "0%";
    var totalDiscountAmount = ViewData["TotalDiscountAmount"] as string ?? "$0.00";
    var bulkDiscountAmount = ViewData["BulkDiscountAmount"] as string ?? "$0.00";
    var loyaltyDiscountAmount = ViewData["LoyaltyDiscountAmount"] as string ?? "$0.00";
    var finalTotalCartPrice = ViewData["FinalTotalCartPrice"] as string ?? "$0.00";

    // IMPORTANT: The discount calculation logic in the controller action that populates this view (OrderStepOne)
    // should be IDENTICAL to the logic in the PlaceOrder action to ensure consistency.
    // Consider having OrderStepOne call the same CalculateBulkDiscount and CalculateLoyaltyDiscountAsync helper methods.
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white"> @* Changed to bg-primary for a common theme *@
            <h2 class="card-title mb-0">Order Review</h2>
        </div>
        <div class="card-body">

            @* Placeholder for dynamic messages (error or success) from AJAX submission *@
            <div id="notificationMessage" class="alert text-center" style="display: none;" role="alert">
                @* Message will be populated by JavaScript *@
            </div>

            @* Display initial error message if redirected (e.g., from an empty cart scenario in OrderStepOne) *@
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger text-center" role="alert">
                    @TempData["ErrorMessage"]
                </div>
            }

            @if (Model == null || !Model.Any())
            {
                <div class="alert alert-warning text-center" role="alert">
                    No items found in your cart for review.
                    <p class="mt-2 mb-0"><a href="@Url.Action("Profile", "ShoppingCartItems")" class="alert-link">Return to Shopping Cart</a></p>
                </div>
            }
            else
            {
                <p>Please review the items in your order before proceeding.</p>

                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="thead-light">
                            <tr>
                                <th>Book Title</th>
                                <th>Author</th>
                                <th class="text-center" style="width: 100px;">Quantity</th>
                                <th class="text-right">Unit Price</th>
                                <th class="text-right">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.BookTitle)</td>
                                    <td>@Html.DisplayFor(modelItem => item.BookAuthorName)</td>
                                    <td class="text-center">@Html.DisplayFor(modelItem => item.Quantity)</td>
                                    <td class="text-right">@Html.DisplayFor(modelItem => item.BookListPriceDisplay)</td>
                                    <td class="text-right">@Html.DisplayFor(modelItem => item.TotalPriceDisplay)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6 offset-md-6">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5 class="card-title">Order Summary</h5>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Total Items
                                        <span class="badge badge-secondary badge-pill">@totalCartItems</span> @* Changed badge color for neutrality *@
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Subtotal (Before Discounts)
                                        <span>@initialTotalCartPrice</span>
                                    </li>
                                    @*
                                        The following conditions convert the currency string (e.g., "$5.00") back to a decimal
                                        to check if the discount amount is greater than zero. This can be fragile if the
                                        currency format from ToString("C") changes based on server culture (e.g., using '€' or different separators).
                                        A more robust approach would be to pass boolean flags from the controller indicating if each discount is active,
                                        or check the percentage string (e.g., if bulkDiscountPercentage != "0%").
                                    *@
                                    @if (!string.IsNullOrEmpty(bulkDiscountAmount) && Convert.ToDecimal(bulkDiscountAmount.Replace("$", "").Replace(",", "").Replace("€", "")) > 0)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center text-info"> @* Changed to text-info for discount *@
                                            Bulk Discount (@bulkDiscountPercentage)
                                            <span>- @bulkDiscountAmount</span>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(loyaltyDiscountAmount) && Convert.ToDecimal(loyaltyDiscountAmount.Replace("$", "").Replace(",", "").Replace("€", "")) > 0)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center text-info"> @* Changed to text-info for discount *@
                                            Loyalty Discount (@loyaltyDiscountPercentage)
                                            <span>- @loyaltyDiscountAmount</span>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(totalDiscountAmount) && Convert.ToDecimal(totalDiscountAmount.Replace("$", "").Replace(",", "").Replace("€", "")) > 0)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center font-weight-bold text-primary">
                                            Total Discount Applied (@totalDiscountPercentage)
                                            <span>- @totalDiscountAmount</span>
                                        </li>
                                    }
                                    <li class="list-group-item d-flex justify-content-between align-items-center font-weight-bold">
                                        Grand Total (After Discounts)
                                        <span class="text-success h5">@finalTotalCartPrice</span> @* Made grand total more prominent *@
                                    </li>
                                </ul>
                                <div class="mt-3 d-flex justify-content-between">
                                    <a href="@Url.Action("Profile", "ShoppingCartItems")" class="btn btn-outline-secondary">Back to Cart</a>

                                    <form id="placeOrderForm" asp-action="PlaceOrder" asp-controller="Orders" method="post">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" id="placeOrderButton" class="btn btn-success btn-lg">
                                            <i class="fas fa-check-circle mr-2"></i>Place Order @* Added an icon example, ensure Font Awesome is linked *@
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const placeOrderForm = document.getElementById('placeOrderForm');
            if (placeOrderForm) {
                placeOrderForm.addEventListener('submit', function(event) {
                    event.preventDefault(); // Prevent the default form submission

                    const form = event.target;
                    const button = document.getElementById('placeOrderButton');
                    const notificationDiv = document.getElementById('notificationMessage');

                    // Hide any previous messages and reset style
                    notificationDiv.style.display = 'none';
                    notificationDiv.className = 'alert text-center'; 
                    notificationDiv.textContent = '';

                    // Disable the button and show a loading indicator
                    button.disabled = true;
                    const originalButtonText = button.innerHTML; // Store original content (including icon)
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';

                    const antiForgeryToken = form.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch(form.action, {
                        method: form.method,
                        headers: {
                            // 'Content-Type': 'application/json', // Not strictly necessary if not sending a JSON body
                            'RequestVerificationToken': antiForgeryToken 
                        },
                        // No body needed for this specific POST request as data is handled server-side from session/DB.
                    })
                    .then(response => {
                        // Try to parse as JSON. If it's a redirect (HTML), response.json() will fail.
                        return response.json().catch(err => {
                            // If JSON parsing fails, it might be an HTML error page or redirect.
                            // We'll create a synthetic error object to be caught by the next .catch()
                            return Promise.reject(new Error(`Server returned non-JSON response. Status: ${response.status}. Check console for details.`));
                        });
                    })
                    .then(data => {
                        if (data.success) {
                            notificationDiv.classList.add('alert-success');
                            notificationDiv.textContent = data.message + (data.orderId ? ` Order ID: ${data.orderId}` : '');
                            notificationDiv.style.display = 'block';

                            // Update button to show success and disable it permanently for this submission
                            button.innerHTML = '<i class="fas fa-check-circle mr-2"></i>Order Placed!';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-outline-success');
                            button.disabled = true; 

                            // Optionally hide cart details and summary sections
                            const cartContainer = form.closest('.card-body');
                            const tableResponsive = cartContainer.querySelector('.table-responsive');
                            const orderSummaryRow = cartContainer.querySelector('.row.mt-4'); // This contains summary and buttons
                            
                            if (tableResponsive) tableResponsive.style.display = 'none';
                            if (orderSummaryRow) {
                                // Hide the whole summary/button row, or just specific parts
                                // For example, hide the "Back to Cart" and the form itself
                                const backToCartButton = orderSummaryRow.querySelector('a.btn-outline-secondary');
                                if(backToCartButton) backToCartButton.style.display = 'none';
                                form.style.display = 'none'; // Hide the form including the place order button
                            }
                             // Scroll to the notification message
                            notificationDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });


                        } else {
                            // Handle errors explicitly returned as JSON with success: false
                            notificationDiv.classList.add('alert-danger');
                            notificationDiv.textContent = data.message || 'An unknown error occurred while placing the order.';
                            notificationDiv.style.display = 'block';
                            button.disabled = false; // Re-enable button
                            button.innerHTML = originalButtonText; // Restore original button text/icon
                             // Scroll to the notification message
                            notificationDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    })
                    .catch(error => {
                        console.error('Place Order Error:', error);
                        notificationDiv.classList.add('alert-danger');
                        notificationDiv.textContent = error.message || 'A network error or script error occurred. Please try again.';
                        notificationDiv.style.display = 'block';
                        button.disabled = false; // Re-enable button
                        button.innerHTML = originalButtonText; // Restore original button text/icon
                         // Scroll to the notification message
                        notificationDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    });
                });
            }
        });
    </script>
}
